{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Harmony","text":""},{"location":"#_1","title":"Harmony 2.0 Documentation Portal.","text":"Harmony Boilerplate gives you the best developer experience with all the features you need for production based react redux: react routers &amp; mobile rendering, TypeScript support, smart bundling, Redux TK, and more. No config needed. Quick start \ud83d\ude80              Download The Harmony project          Install Harmony <pre><code>npm install</code></pre> Start the Project <pre><code>npm start</code></pre> Features Speeds up development <p>We did most of the heavy lifting for you to provide a better experience with boilerplates.                  Best Practice <p>Predefined scripts that let you deliver your app as fast as you can.                  Static-Typing <p>The boilerplate comes with Typescript built-in provided with pre-defined rule-set for better writing and predective bad practices.                  Real-Time Dispatching <p>Ability to dispatch actions on each client via Websockets.                  User Authentication <p>Ready-To-Use auth mechanism with high security.                  Multilingual Support <p>Easy to add and support multiple languages with `react-intl`.                  Tools React Redux Redux Toolkit MongoDB Vite Node JS TypeScript TailwindCSS"},{"location":"develop-with-harmony/","title":"Harmony Architecture","text":""},{"location":"develop-with-harmony/#flow-data","title":"Flow Data","text":"<p>The following diagram display basic redux architecture with few Harmony Features. You can get more information on every feature in the docs.</p> <p></p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>How to read Harmony Documentation</p> <p>Harmony Documentation built by steps to make it easy for you to get started and understand the full framework. Please following the <code>Next</code> button at the bottom of the page.</p> <p>Harmony is a starter-kit to enable fast on-boarding when it comes to developing web applications with the focus on React Redux and NodeJS. Harmony suggest new features and improve your flexibility by adding your customized features.</p> <p>Harmony Boilerplate focus on performance and Best Practices to build the most updated web application</p>"},{"location":"getting-started/#creation","title":"Creation","text":"<p>To create a Harmony based project, you can use the Harmony CLI to create a new project. This will present a menu to select if you want a Single Page Application (SPA), or a Multi Page Application (MPA) and some other info required for the project.</p> Description Command Image Harmony CLI <code>$ npx harmony</code> Harmony CLI Create Project <code>$ npx harmony create</code> Harmony CLI -  1. Select SPA\\MPA 2. Install <pre><code>$ npx harmony create &lt;my-app&gt; &lt;location&gt;\n#&lt;my-app&gt; is the project name and is optional\n#&lt;location&gt; is the project location to create\n</code></pre>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Enter to the Newly created folder and install the dependencies (if not done by CLI).</p> <pre><code>$ npm install\n</code></pre>"},{"location":"getting-started/#execution","title":"Execution","text":""},{"location":"getting-started/#run-the-project","title":"Run the Project","text":"<p>Run for Development <pre><code>$ npm start\n</code></pre></p> <p>Run for Production <pre><code>$ npm run build\n</code></pre></p>"},{"location":"getting-started/#run-storybook","title":"Run Storybook","text":"<pre><code>$ npm run storybook\n</code></pre> <p>Congratulations, you start your first Harmony web app. Now go on and explore how to develop your next webapp easily with our feathers.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2017 - 2025 Harmony Framework</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <ul> <li>Note - the copy right thing is only if there is copy right comment block in the code, there is no need to mention us or give any attribution.</li> </ul>"},{"location":"tags/","title":"Tags","text":""},{"location":"extensions/client/api/","title":"Api calls","text":"<p>API Requests is one of the features coming from Harmony 2.0. It is using the RTK Query's <code>createApi</code> functionality. It allows you to define a set of \"endpoints\" that describe how to retrieve data from backend APIs and other async sources, including the configuration of how to fetch and transform that data. It generates an \"API slice\" structure that contains Redux logic (and optionally React hooks) that encapsulate the data fetching and caching process for you.</p>"},{"location":"extensions/client/api/#call","title":"call","text":"<p>API creation </p>"},{"location":"extensions/client/api/#creation","title":"Creation","text":"<pre><code>import { createApi } from '@reduxjs/toolkit/query/react';\n\nexport const rbaApi = createApi({\n    reducerPath: config.apiSliceName,\n    baseQuery: baseQueryImpl({\n        baseUrl: 'v1/rba',\n    }),\n    tagTypes: ['Rba'],\n    endpoints: (build) =&gt; ({\n        policies: build.query&lt;RbaStateType['permissions'], void&gt;({\n            query() {\n                return {\n                    url: '/policies',\n                    method: 'GET',\n                };\n            },\n        }),\n    })\n});\n</code></pre>"},{"location":"extensions/client/api/#call-the-api","title":"Call the API","text":"<pre><code>const [ policies ] = rbaApi.useLazyPoliciesQuery();\npolicies().then(res =&gt; console.log(res));\n</code></pre>"},{"location":"extensions/client/api/#api-call-options","title":"API Call Options","text":"<p>In api call you can send in options some props to define some handling. This will be done under extraOptions. Currently, ignoreSpinner is supported. For example: <pre><code>    export const rbaApi = createApi({\n    reducerPath: config.apiSliceName,\n    baseQuery: baseQueryImpl({\n        baseUrl: 'v1/rba',\n    }),\n    tagTypes: ['Rba'],\n    endpoints: (build) =&gt; ({\n        extraOptions: {\n            ignoreSpinner: true,\n        },\n        policies: build.query&lt;RbaStateType['permissions'], void&gt;({\n            query() {\n                return {\n                    url: '/policies',\n                    method: 'GET',\n                };\n            },\n        }),\n    })\n});\n</code></pre></p> <p>For more info, checkout the full documentation: https://redux-toolkit.js.org/rtk-query/api/createApi </p>"},{"location":"extensions/client/client/","title":"Client Introduction","text":""},{"location":"extensions/client/client/#client-introduction","title":"Client Introduction","text":"<p>Harmony is a client-side project that contains all the necessary code for the frontend. It is built using React, TypeScript, and Redux, with Vite as the build tool. The styling is implemented using Tailwind CSS.</p>"},{"location":"extensions/client/client/#client-folder-structure","title":"Client Folder Structure","text":"<pre><code>\u251c\u2500\u2500 src\n    \u251c\u2500\u2500 modules\n        \u251c\u2500\u2500 app-intl\n            \u251c\u2500\u2500 Intl.i18n.ts\n            \u251c\u2500\u2500 index.ts\n            \u251c\u2500\u2500 components\n        \u251c\u2500\u2500 base-styles\n            \u251c\u2500\u2500  styles\n        \u251c\u2500\u2500 common-components\n        \u251c\u2500\u2500  sdk\n            \u251c\u2500\u2500 hooks\n            \u251c\u2500\u2500 modules\n                \u251c\u2500\u2500 module1\n                    \u251c\u2500\u2500 Module1Api.ts\n                    \u251c\u2500\u2500 Module1Config.ts\n                    \u251c\u2500\u2500 Module1Reducer.ts\n                    \u251c\u2500\u2500 Module1Types.ts\n                    \u251c\u2500\u2500 index.ts\n                    \u251c\u2500\u2500 useApp.ts\n                ...\n            \u251c\u2500\u2500 services\n            \u251c\u2500\u2500 utils\n            \u251c\u2500\u2500 index.ts\n        \u251c\u2500\u2500 widget1\n            \u251c\u2500\u2500 components\n                \u251c\u2500\u2500 widget1.main.tsx\n            \u251c\u2500\u2500 styles\n                \u251c\u2500\u2500 index.css\n            \u251c\u2500\u2500 index.ts\n            \u251c\u2500\u2500 idget1.i18n.ts\n            \u251c\u2500\u2500 Widget1.tsx\n            \u251c\u2500\u2500 Widget1.types.ts\n        \u251c\u2500\u2500 widget2\n            \u251c\u2500\u2500 components\n                \u251c\u2500\u2500 widget2.main.tsx\n            \u251c\u2500\u2500 styles\n                \u251c\u2500\u2500 index.css\n            \u251c\u2500\u2500 index.ts\n            \u251c\u2500\u2500 Widget2.i18n.ts\n            \u251c\u2500\u2500 Widget2.tsx\n            \u251c\u2500\u2500 Widget2.types.ts\n        \u251c\u2500\u2500 &lt;MPA only&gt;-vendors\n            \u251c\u2500\u2500 src\n            \u251c\u2500\u2500 index.html\n            ...\n        ...\n</code></pre> <p>In a multipage project, each module will have a designated prefix. For example, <code>project-prefix-widget1</code>.</p>"},{"location":"extensions/client/client/#sdk","title":"sdk","text":"<p>The SDK layer houses all business logic and API calls while providing shared code across modules, including hooks, services, utilities, and more.</p>"},{"location":"extensions/client/client/#base-technologies","title":"Base Technologies","text":"React Redux Redux Toolkit Vite Node JS TypeScript TailwindCSS"},{"location":"extensions/client/development/","title":"Code Guards","text":""},{"location":"extensions/client/development/#development-guidelines-code-guards","title":"Development Guidelines &amp; Code Guards","text":"<p>Harmony uses ESLint to maintain code consistency and catch common mistakes early. It enforces coding standards and best practices, helping developers avoid common errors while keeping the codebase clean and structured.</p> <p>For instance, passing all props downstream to child components is not allowed. This rule enhances performance by ensuring that components re-render only with the necessary props, preventing unnecessary updates.</p> <pre><code>{\n  \"root\": true,\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\n    \"@typescript-eslint\",\n    \"jsx-a11y\",\n    \"import\",\n    \"prettier\",\n    \"unused-imports\",\n    \"custom-rules\"\n  ],\n  \"settings\": {\n    \"react\": {\n      \"version\": \"detect\" // Tells eslint-plugin-react to automatically detect the version of React to use\n    }\n  },\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:jsx-a11y/recommended\",\n    \"prettier\"\n  ],\n  \"parserOptions\": {\n    \"project\": \"./tsconfig.json\",\n    \"ecmaVersion\": 2020,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n  \"rules\": {\n    \"@typescript-eslint/no-duplicate-enum-values\": \"off\",\n    \"@typescript-eslint/naming-convention\": \"off\",\n    \"@typescript-eslint/ban-types\": \"off\",\n    \"import/extensions\": \"off\",\n    \"no-debugger\": \"off\",\n    \"no-underscore-dangle\": [\n      \"error\",\n      { \"allow\": [\"__REDUX_DEVTOOLS_EXTENSION__\", \"_default\"] }\n    ],\n    \"no-param-reassign\": [\n      \"error\",\n      { \"props\": true, \"ignorePropertyModificationsFor\": [\"draft\"] }\n    ],\n    \"max-lines-per-function\": [\n      \"error\",\n      { \"max\": 150, \"skipBlankLines\": true, \"skipComments\": true }\n    ],\n    \"max-lines\": [\n      \"error\",\n      { \"max\": 400, \"skipBlankLines\": true, \"skipComments\": true }\n    ],\n    \"max-depth\": \"error\",\n    \"no-multiple-empty-lines\": [\"error\", { \"max\": 1, \"maxEOF\": 1 }],\n    \"react/sort-comp\": [\"off\"],\n    \"react/display-name\": [\"off\"],\n    \"react/prefer-stateless-function\": [\"off\"],\n    \"import/no-named-as-default\": [\"off\"],\n    \"arrow-body-style\": [\"off\"],\n    \"func-names\": [\"off\"],\n    \"guard-for-in\": [\"off\"],\n    \"lines-between-class-members\": [\"off\"],\n    \"jsx-a11y/label-has-associated-control\": [2, { \"depth\": 4 }],\n    \"import/prefer-default-export\": \"off\",\n    \"import/no-default-export\": \"off\",\n    \"react/jsx-one-expression-per-line\": [\"off\"],\n    \"class-methods-use-this\": [\"off\"],\n    \"max-len\": [\"error\", { \"code\": 260 }],\n    \"@typescript-eslint/explicit-function-return-type\": [\"off\"],\n    \"@typescript-eslint/no-use-before-define\": [\"off\"],\n    \"@typescript-eslint/no-explicit-any\": [\"off\"],\n    \"no-trailing-spaces\": [\n      \"error\",\n      { \"skipBlankLines\": true, \"ignoreComments\": true }\n    ],\n    \"react/jsx-props-no-spreadings\": [\"off\"],\n    \"linebreak-style\": 0,\n    \"global-require\": 0,\n    \"eslint-linebreak-style\": [0, \"error\", \"windows\"],\n    \"indent\": [\"error\", \"tab\", { \"SwitchCase\": 1 }],\n    \"no-tabs\": [\"error\", { \"allowIndentationTabs\": true }],\n    \"react/jsx-indent-props\": [\"error\", \"tab\"],\n    \"react/jsx-indent\": [\"error\", \"tab\"],\n    \"comma-dangle\": [\"error\", \"only-multiline\"],\n    \"jsx-a11y/alt-text\": [2],\n    \"jsx-a11y/anchor-has-content\": [2],\n    \"jsx-a11y/anchor-is-valid\": [\"off\"],\n    \"jsx-a11y/aria-props\": [2],\n    \"jsx-a11y/aria-proptypes\": [2],\n    \"jsx-a11y/aria-role\": [\n      2,\n      { \"allowedInvalidRoles\": [\"text\"], \"ignoreNonDOM\": true }\n    ],\n    \"jsx-a11y/aria-unsupported-elements\": [2],\n    \"jsx-a11y/click-events-have-key-events\": \"off\",\n    \"jsx-a11y/control-has-associated-label\": [2, { \"depth\": 3 }],\n    \"jsx-a11y/heading-has-content\": [2],\n    \"jsx-a11y/img-redundant-alt\": [2],\n    \"jsx-a11y/no-access-key\": [2],\n    \"jsx-a11y/no-autofocus\": [2],\n    \"jsx-a11y/no-noninteractive-element-interactions\": [2],\n    \"jsx-a11y/no-noninteractive-tabindex\": [2],\n    \"jsx-a11y/tabindex-no-positive\": [2],\n    \"jsx-a11y/no-static-element-interactions\": [2],\n    \"import/no-extraneous-dependencies\": [\"off\"],\n    \"react/react-in-jsx-scope\": [\"off\"],\n    \"react/jsx-max-props-per-line\": [\n      \"error\",\n      { \"maximum\": 1, \"when\": \"multiline\" }\n    ],\n    \"react/jsx-first-prop-new-line\": [\"error\", \"multiline-multiprop\"],\n    \"curly\": [\"error\", \"all\"],\n    \"brace-style\": [\"error\", \"1tbs\", { \"allowSingleLine\": false }],\n    \"react/jsx-closing-bracket-location\": [\"error\", \"line-aligned\"],\n    \"react/self-closing-comp\": [\"error\", { \"component\": true, \"html\": true }],\n    \"react/jsx-key\": [\"error\", { \"checkFragmentShorthand\": true }],\n    \"comma-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"no-extra-semi\": \"error\",\n    \"@typescript-eslint/no-unsafe-function-type\": \"off\",\n    \"quotes\": [\"error\", \"single\"],\n    \"object-curly-spacing\": [\"error\", \"always\"],\n    \"@typescript-eslint/no-unused-vars\": [\n      \"error\",\n      { \"argsIgnorePattern\": \"^_\", \"varsIgnorePattern\": \"^_\" }\n    ],\n    \"@typescript-eslint/no-empty-object-type\": [\n      \"error\",\n      { \"allowObjectTypes\": \"always\", \"allowInterfaces\": \"with-single-extends\" }\n    ],\n    \"arrow-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"space-before-blocks\": [\"error\", \"always\"],\n    \"@typescript-eslint/no-unused-expressions\": [\n      \"error\",\n      { \"allowShortCircuit\": true, \"allowTernary\": true }\n    ],\n    \"keyword-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"semi\": [\"error\", \"always\"],\n    \"@typescript-eslint/ban-ts-comment\": \"off\",\n    \"unused-imports/no-unused-imports\": \"error\"\n  },\n  \"ignorePatterns\": [\n    \".storybook\",\n    \"node_modules\",\n    \"generator\",\n    \"dist\",\n    \"src/**/__docs__\",\n    \"custom-rules/**\",\n    \"src/**/__test__\",\n    \"src/**/*.stories.ts\",\n    \"src/**/*.stories.tsx\"\n  ]\n}\n</code></pre>"},{"location":"extensions/client/error_handler/","title":"Error Handler - TO ALIGN TO NEW ARCHITECTURE","text":""},{"location":"extensions/client/error_handler/#error-handler-concept","title":"Error Handler Concept","text":"<p>Harmony support with Error Handler mechanism to easy maintain your api errors easy and fast with by  maintaining one configuration.</p> <p>Under configuration folder you can find <code>error.config.json</code> file.</p> <p>Location: <code>src/configurations/error.config.json</code></p> <p>The Concept of the error handler is to catch API error and handle it just by configuration. For example: when get devices api failed go to error page, or when submit order failed, display a popup with a message.</p> <p>The idea is to catch those error and decied what to do via just configuration file. Each time a API failed, the API will return some status code + error code from the API. <code>&lt;errorCode&gt;_&lt;statusCode&gt;</code> - Will be the key in the config file, and the value will be \"how we want to handle the error\".</p>"},{"location":"extensions/client/error_handler/#usage","title":"Usage","text":"<p>Let's look first how this config look like with the example</p> <pre><code>{\n  \"pathToErrorCode\": \"data.errorCode\",\n  \"handlers\": {\n    \"devicesListFailed_400\": {\n      \"component\": \"modal\",\n      \"payload\": {\n        \"header\": \"Error\",\n        \"body\": \"Error with Fetch Device List\"\n      }\n    },\n    \"devicesListFailed_206\": {\n      \"level\": \"component\",\n      \"component\": \"notification\",\n      \"payload\": {\n        \"type\": \"danger\",\n        \"header\": \"deviceGallery.specificErrorHandlerToComponentHeader\",\n        \"body\": \"deviceGallery.specificErrorHandlerToComponentBody\"\n      }\n    },\n    \"devicesListFailed_500\": {\n      \"component\": \"ignore\"\n    }\n  }\n}\n</code></pre> <p><code>pathToErrorCode</code> - the path to the error code from the response. <code>handlers</code> - here we define our handlers <code>&lt;errorCode&gt;_&lt;statusCode&gt;</code>. <code>level &lt;optional&gt;</code> - when set level to <code>component</code> then the error will be display only for specific component that handle it with <code>withErrorHandler</code> <code>component</code> - the component type to render inc case of this error. <code>payload</code> - any payload data that can be use for the render component. <code>ignore</code> - ignore component will ignore the error handler for that failure and error handler will do nothing for this error.</p> <p>if we look at the example, when we get error code <code>devicesListFailed</code> and status code <code>400</code> we will display modal component. The payload can be anything that we want to send to that component as props.</p>"},{"location":"extensions/client/error_handler/#witherrorhandler","title":"<code>@withErrorHandler</code>","text":"<p>In some cases when api failed, you want to display error only on specific component on the screen, and not some global component such modal etc .. For that case, you can use the decorator <code>@withErrorHandler</code>.</p> <p><code>@withErrorHandler</code> get the following config:</p> <ul> <li><code>errorCodes</code> - array of error codes from the error handler configuration file</li> <li><code>asComponent &lt;optional&gt;</code> - by default set to false. if set to true, the decorator will not replace the component by default with error component, but it will inject for you to the props <code>ErrorComponent</code>, and you can decide by your self where to render this component.</li> </ul> <p><code>Injected Props</code> - to component that use this decorator, will get injected props:</p> <ul> <li><code>ErrorComponent</code> - a Component that can be render in your decorated component.</li> <li><code>errorHandled</code> - a function that once called he clear the error and not send <code>ErrorComponent</code> to props anymore.</li> </ul> <p>Configuration</p> <p>In error handle configuration file you must to define this error code with <code>\"level\": \"component\"</code> </p> <p>you can see here example how to use it:</p> <pre><code>import withErrorHandler from 'containers/ErrorHandler/withErrorHandler';\n\n@withErrorHandler({\n    errorCodes: ['devicesListFailed_206'],\n    asComponent: true // if set to false, all the component will be replaced with ErrorComponent by default\n})\nclass DeviceGallery extends React.Component&lt;Props, State&gt; {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            searchValue: ''\n        };\n    }\n\n    .....\n}\n</code></pre>"},{"location":"extensions/client/error_handler/#customization","title":"Customization","text":"<p>Location for Global Error Handler: <code>src/containers/ErrorHandler/index.tsx</code> Location for with error handler decorator: <code>src/containers/ErrorHandler/withErrorHandler.tsx</code></p> <p>In this location you can found the Error Handler \"Decider\". Each time error occurred this component will be invoke the render and will go inside a switch case. The switch case decide which component to render and what to do for each error component.</p> <p>So here you can easily do what ever you like and customize the modal and even add your own components for handler.</p>"},{"location":"extensions/client/error_handler/#strict-client-console-errors","title":"Strict Client Console Errors","text":"<p>Harmony keep to be strict with best practices and clean console from errors.  Therefor by default we drop developer to error page and notify with toaster for any console error. </p> <p>To turn off this functionality go to main <code>src/config.ts</code> file and set <code>STRICT_CONSOLE_ERROR</code> to <code>false</code></p>"},{"location":"extensions/client/flow_manager/","title":"Flow Manager Usage Guide","text":"<p>Flow Manager help you to manage flow information by determine the current step, next step and define the set of conditions that satisfy the steps.  Flow Manger using XState for state machine to calculate where are you currently in the flow and where you need to go.</p> <p>Harmony 2.0 Flow Manager</p> <p>Harmony 2.0 contains flow manager by default and is ready to use.</p>"},{"location":"extensions/client/flow_manager/#motivation","title":"Motivation","text":"<p>redux-flow-manager created to help you manage application with complex flows.  In the flow diagram below you can see example of one flow that can be in your application.  In that flow diagram, each color is sub flow, and green and red steps are start and end flow.  Redux Flow Manager help you to manage this sub flows and get decisions where you are and where you need to go.</p> <p></p> <p></p>"},{"location":"extensions/client/flow_manager/#usage","title":"Usage","text":""},{"location":"extensions/client/flow_manager/#files","title":"Files","text":"<p>In Harmony there are few files and folders you need to get familiar with in order to use Flow Manager.</p> <ul> <li><code>src/config/flow-manager</code> - This folder contains the flow, sub-flow and types definition.</li> <li><code>src/modules/sdk/hooks/flow-manager</code> - This folder contains the hooks and conditions that are used to manage the flow.</li> </ul>"},{"location":"extensions/client/flow_manager/#useflowmanager","title":"useFlowManager","text":"<p>This is the main hook that you will use to manage the flow in your application. </p> Method Description <code>getFlowInformation()</code> Retrieves the current flow information including flow type, sub flow type, current step, next step, and steps. <code>startFlow(flowType, currentStep, isMoveToStep)</code> Starts the flow with the specified type and initial step. Optionally moves to the specified step. <code>endFlow()</code> Ends the current flow and clears all data from the flow manager. <code>moveToNextStep(step?, isUpdateInformation)</code> Moves to the next step in the flow. Optionally updates the flow information. <code>moveToPrevStep(step, isUpdateInformation)</code> Moves to the previous step in the flow. Optionally updates the flow information. <code>isLastStep()</code> Checks if the current step is the last step. <code>isFirstStep(steps, currentStep)</code> Checks if the current step is the first step in the flow. <code>isStepIncludedInFlow(stepName)</code> Checks if the specified step is included in the current flow. <code>calculatePreviousStep(steps, chosenStep)</code> Calculates the previous step based on the current steps and the chosen step."},{"location":"extensions/client/flow_manager/#code-example","title":"Code example","text":"<p>Start COP flow with the first step in the flow.</p> <p><pre><code>const onStartBuyFlow = async () =&gt; {\n    const {startFlow} = useFlowManagerApi(navigate);\n    startFlow(flowsTypes.flowTypes.COP,\n        (flowsTypes as TypesConfig).stepTypes.DEVICE_GALLERY.name, true);\n};\n</code></pre> Move to the next step in the flow.</p> <pre><code>const onMiniCartContinue = async () =&gt; {\n    const { moveToNextStep } = useFlowManagerApi(navigate);\n    moveToNextStep();\n};\n</code></pre>"},{"location":"extensions/client/flow_manager_establishment/","title":"Flow Manager Installation and Establishment","text":"<p>Flow Manager help you to manage flow information by determine the current step, next step and define the set of conditions that satisfy the steps.  Flow Manger using XState for state machine to calculate where are you currently in the flow and where you need to go.</p> <p>Harmony 2.0 Flow Manager</p> <p>Harmony 2.0 contains flow manager by default and is ready to use.  Click Here to check the usage guide.</p>"},{"location":"extensions/client/flow_manager_establishment/#install","title":"Install","text":"<pre><code>npm install --save redux-flow-manager\n</code></pre>"},{"location":"extensions/client/flow_manager_establishment/#usage","title":"Usage","text":"<p>Check out the example in the files <code>app.ts</code> and <code>flowManger.browser.ts</code> in the Test Folder.</p> <p>Step 1: Add the flow manager reducer to your project.</p> <pre><code>import { combineReducers } from 'redux';\nimport { flowManagerReducer } from 'redux-flow-manager';\n\nconst reducers = {\n    ...,\n    flowManagerFlows: flowManagerReducer\n};\nconst rootReducer = combineReducers(reducers);\n</code></pre> <p>Step 2: Create Steps Configuration file - steps config define the set of steps for each sub flow types. (config files properties are explained below. Steps Configuration</p> <p>Step 3: Create Flows Configuration file - flow config file define the sub flow types name and the conditions that should be success to make this sub flow valid. (config files properties are explained below. Flows Configuration</p> <p>Step 4: Call <code>CreateFlowManagerAPI</code> with your store, reducer slice name, flows configuration and steps configuration. ( more details of how configuration should be look like will explain later )</p> <pre><code>// sdk/store.ts\n\nimport { CreateFlowManager } from './utils';\n\nexport const flowManager = CreateFlowManager(store);\n</code></pre> <p>Step 5: <code>CreateFlowManagerAPI</code> return an instance of Flow Manager with functionality that will help you manage flows in your app.</p> <pre><code>// ./store.flow.manager.utils.ts\n\nimport CreateFlowManager, { parseSubFlowsJSON } from 'redux-flow-manager';\nimport { subFlowsConfig, flowsConfig } from '@config';\nimport { flowsConditions } from '../hooks/flow-manager/index';\n\nexport default (Store: any) =&gt; CreateFlowManager(Store, 'flowManagerFlows', parseSubFlowsJSON(subFlowsConfig, flowsConditions), flowsConfig);\n</code></pre>"},{"location":"extensions/client/flow_manager_establishment/#store-structure","title":"Store Structure","text":"<pre><code>interface FlowManagerState {\n    flowType: string;\n    subFlowTypes: Array&lt;string&gt;;\n    currentStep: string;\n    nextStep: string;\n    steps: Array&lt;string&gt;;\n}\n</code></pre>"},{"location":"extensions/client/flow_manager_establishment/#initial-flow-manager","title":"Initial Flow Manager","text":""},{"location":"extensions/client/flow_manager_establishment/#createflowmanagerapistore-slicename-flowsconfig-stepsconfig","title":"CreateFlowManagerAPI(store, sliceName, flowsConfig, stepsConfig);","text":"<p>Create new instance of flow manager. All the API methods of flow manager describe below.</p>"},{"location":"extensions/client/flow_manager_establishment/#arguments","title":"arguments:","text":"Property Type Required Default Description <code>store</code> object Required undefined Pass in the redux store. <code>sliceName</code> string Required undefined the name of the reducer slice <code>flowsConfig</code> SubFlowsConfig Required undefined Flows Configuration <code>stepsConfig</code> StepsConfig Required undefined Steps Configuration"},{"location":"extensions/client/flow_manager_establishment/#start-and-end-flow","title":"Start and End Flow","text":""},{"location":"extensions/client/flow_manager_establishment/#async-startflowflowtype-autoupdate-currentstep","title":"async startFlow(flowType, autoUpdate, currentStep)","text":"<p>Start flow is used when your app is init the main flow type in the store. That flow type represent a set of sub flow types in your Flows Configuration</p>"},{"location":"extensions/client/flow_manager_establishment/#arguments_1","title":"arguments:","text":"Property Type Required Default Description <code>flowType</code> string Required undefined The flow type that represent a set of sub flow types Flows Configuration <code>currentStep</code> string Required undefined Initial specific step by start the flow instead of the first step that define in steps array <code>autoUpdate</code> boolean Optional undefined Optionally pass indicate to automatic run state machine calculator to calculate the flow information data for any change in store"},{"location":"extensions/client/flow_manager_establishment/#endflow","title":"endFlow()","text":"<p>End the flow. Clear all the data from flow manager.</p>"},{"location":"extensions/client/flow_manager_establishment/#steps-actions","title":"Steps Actions","text":""},{"location":"extensions/client/flow_manager_establishment/#async-updateinformation","title":"async updateInformation()","text":"<p>Update Information running the state machine to calculate the sub flows condition and update the steps information and sub flows.</p> <p>NOTE: If you call <code>startFlow</code> with <code>autoUpdate</code> true, this method invoke automatic for every change in store. This is very useful for auto calculation nd update your component automatic without worry when to call to updateInformation.</p>"},{"location":"extensions/client/flow_manager_establishment/#nextstepstep","title":"nextStep(step?)","text":"<p>Next Step method update the current step with the next step and the next step with the new next step return the next step value.</p> <p>NOTE: To Promise last updated result, call to updateInformation before.</p>"},{"location":"extensions/client/flow_manager_establishment/#arguments_2","title":"arguments:","text":"Property Type Required Default Description <code>step</code> string Optional currentStep Optional to pass the step move to. by default it move to the next step according to steps array."},{"location":"extensions/client/flow_manager_establishment/#islaststep","title":"isLastStep()","text":"<p>Return if the current step is the last step.</p> <p>NOTE: To Promise last updated result, call to updateInformation before.</p>"},{"location":"extensions/client/flow_manager_establishment/#selectors","title":"Selectors","text":"<p>Each Selector return the corresponding value from the store.</p> <p>NOTE is not recommended to use directly with selector. Use Step Actions async methods to get the most updated result before navigate to next step for example.</p> <ul> <li>getFlowType()</li> <li>getSubFlowTypes()</li> <li>getCurrentStep()</li> <li>getSteps()</li> <li>getNextStep()</li> </ul> <p></p>"},{"location":"extensions/client/flow_manager_establishment/#flows-configuration","title":"Flows Configuration","text":"<p>Flows Config is an array of object, that each object define the sub flow that may be in your entire application. Each flow object have conditions array that each condition include callback. that callback can check anything related to the condition, if the condition you check is success then return resolve, if the condition is failed then return reject.</p> <p>If all conditions of a sub flow pass, then this sub flow added to the subFlowTypes array </p> <p>Flow Object Properties:</p> <ul> <li><code>flowName: string</code> - unique name of the sub flow type</li> <li><code>conditions: array</code> - an array of Condition Object</li> <li><code>conditionName: string</code> - the name of the condition</li> <li><code>onCheck: function</code> - a <code>promise</code> function that return <code>resolve</code> when the condition success and <code>reject</code> if the condition should be failed</li> <li><code>mandatory: boolean</code> - optional property. define if to remove that sub flow from the array if this condition failed. true by default.</li> </ul> <p>NOTE The Order of the Flow Objects in the array are matter. The checks will run by that order.</p> <pre><code>const flowsConfig = [\n    {\n        \"flowName\": \"defaultScenario\",\n        \"color\": \"#9b9b9b\",\n        \"conditions\": [\n            {\n                \"conditionName\": \"defaultSuccessCondition\",\n                \"onCheck\": \"defaultSuccessCondition\",\n                \"displayName\": \"Default Success\",\n                \"description\": \"Return Always Success to be used for every Flow as Default Scenario\"\n            }\n        ]\n    },\n    {\n        \"flowName\": \"multipleDevices\",\n        \"conditions\": [\n            {\n                \"conditionName\": \"multipleDevicesCondition\",\n                \"onCheck\": \"multipleDevicesCondition\",\n                \"displayName\": \"Multiple Devices COP\",\n                \"description\": \"Return success if there are multiple devices in the cart\"\n            }\n        ],\n        \"runInFlowTypes\": [\n            \"COP\"\n        ],\n        \"color\": \"#3133a4\"\n    }\n];\n</code></pre> <p></p>"},{"location":"extensions/client/flow_manager_establishment/#steps-configuration","title":"Steps Configuration","text":"<p>Steps configuration define for each flow and sub flow, the set of steps that the user need to complete in your application.</p> <p>Step Object Properties:</p> <ul> <li><code>key: flowType</code> (Example: <code>COP</code>) - the key represent the <code>flowType</code></li> <li><code>key: subFlowType</code> (Example: <code>planOnlyFlow</code>) - represent the <code>subFlowType</code></li> <li><code>stesp: array</code> - set of steps for this <code>flowType</code> and <code>subFlowType</code></li> </ul> <p>Sub-Flows Order</p> <p>The Order of the Sub flow Objects in the object matters, The checks will run by that order. For example: if you put <code>defaultScenario</code> before <code>multipleDevices</code>, then <code>defaultScenario</code> always wil be set before <code>multipleDevices</code>.</p> <pre><code>const stepsConfig = {\n    \"COP\": {\n        \"multipleDevices\": {\n            \"id\": \"43da9488-07a0-4c36-aa76-587bc62707ff6\",\n            \"steps\": [\n                \"DEVICE_GALLERY\",\n                \"DEVICE_DETAILS\",\n                \"REVIEW_BASKET\"\n            ],\n            \"description\": \"Generic COP flow for multiple devices in the cart\"\n        },\n        \"defaultScenario\": {\n            \"id\": \"374323dd-d091-4164-993a-3dcce359bca3\",\n            \"steps\": [\n                \"DEVICE_GALLERY\",\n                \"REVIEW_BASKET\"\n            ],\n            \"description\": \"Generic COP flow for one device in the cart\"\n        }\n    }\n};\n</code></pre>"},{"location":"extensions/client/flow_manager_establishment/#xstate","title":"XState","text":""},{"location":"extensions/client/flow_manager_establishment/#getmachineflowconfig","title":"getMachineFlowConfig()","text":"<p>Return an XState config that can be set in XState visualizer to see your state machine created by your config.</p> <p>XState Visualizer </p>"},{"location":"extensions/client/global_spinner/","title":"Global Spinner","text":""},{"location":"extensions/client/global_spinner/#global-spinner-concept","title":"Global Spinner Concept","text":"<p>While we perform Api calls, most of the time we want the page show indication that page load, this is why we need loader. The global Spinner feather in harmony do it easily and automatic without any effort.</p> <p>Any time there is \"pending\" request in the network, global spinner will be display. That mean in redux speak - any time we have network task, we will have value greater than 1 in store under <code>feedbackHandler</code> slice.</p> <p>If we have an api call that we don't want a spinner for, we can remove it.  For more info, see API Call Options section.</p>"},{"location":"extensions/client/main_features/","title":"Main Features","text":""},{"location":"extensions/client/main_features/#mobile-ready","title":"Mobile Ready","text":"<p>Our starter kit is designed with mobile-first principles, ensuring that your application looks and performs seamless experience whether users are on a smartphone, tablet, or desktop.</p> <p>Key features include:</p> <ul> <li>Responsive Layouts: Automatically adjust to different screen sizes and orientations.</li> <li>Cross-Platform Compatibility: Consistent look and feel across various devices and operating systems.</li> <li>Mobile-Specific Enhancements: Features like mobile navigation menus, swipe gestures, and more.</li> </ul>"},{"location":"extensions/client/main_features/#seo-friendly","title":"SEO Friendly","text":"<p>Our starter kit is built with the latest technologies including React 19 allowing you to create SEO-friendly web applications that rank higher in search engine results.</p> <pre><code>const HomePage = ({ currentOffer }) =&gt; {\n  const structuredData = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    id: window?.location?.href,\n    sku: '11112222',\n    name: \"Samsung Galaxy Z Flip6 5G\",\n    color: \"Silver\",\n    brand: {\n        \"@type\": \"Brand\",\n        \"name\": \"Samsung\"\n    },\n  };\n\n  return (\n    &lt;&gt;\n      &lt;title&gt;My Override Title&lt;/title&gt;\n      &lt;meta name=\"description\" content=\"My cool APP built with Harmony\" /&gt;\n      &lt;script type=\"application/ld+json\"&gt;\n        {JSON.stringify(structuredData)}\n      &lt;/script&gt;\n      {/* Page content */}\n    &lt;/&gt;\n  );\n};\n\nexport default HomePage;\n</code></pre>"},{"location":"extensions/client/modules/","title":"Generate Modules","text":"<p>Harmony gives you the option to create a module with a single command, and it will create all the necessary files for you. The module types supported by Harmony are:</p> <ul> <li><code>ui</code></li> <li><code>api</code></li> </ul>"},{"location":"extensions/client/modules/#create-module-by-cli","title":"Create Module by cli","text":"<p><pre><code>harmony add [type] [name]    // Add a new module\n</code></pre> </p>"},{"location":"extensions/client/modules/#create-ui-module-by-cli","title":"Create UI Module by cli","text":"<p>When Adding a UI module, it will create a folder with the name of the module in the <code>src/modules/</code> directory and create the following files:</p> <p></p> <ul> <li><code>components/&lt;module-name&gt;.main.tsx</code> - The main business component file for the module.</li> <li><code>styles/index.css</code> - The style file for the module.</li> <li><code>&lt;module-name&gt;.i18n.ts</code> - The index file for the module translation.</li> <li><code>&lt;module-name&gt;.provider.tsx</code> - The module provider component.</li> <li><code>&lt;module-name&gt;.tsx</code> - The module main component file exporting the module.</li> <li><code>&lt;module-name&gt;.types.ts</code> - The module types file already populated with the Harmony basic types.</li> <li><code>index.ts</code> - The module main file exporting the module and its types.</li> </ul> <p>Other than creating the folders and files, it will also add the module to the following files:</p> <ul> <li><code>src\\modules\\app-intl\\Intl.i18n.ts</code> - The main translation file.</li> <li><code>tsconfig.app.json</code> - The main typescript configuration file to include the module path.</li> <li><code>vite.config.ts</code> - The main build configuration file to include the module path.</li> </ul>"},{"location":"extensions/client/modules/#create-api-module-by-cli","title":"Create API Module by cli","text":"<p>When Adding a UI module, it will create a folder with the name of the module in the <code>src/modules/sdk/modules/</code> directory and create the following files:</p> <p></p> <ul> <li><code>&lt;ModuleName&gt;Api.ts</code> - The module API file containing examples of end-points, base query, redux data persisting and more.</li> <li><code>&lt;ModuleName&gt;Config.ts</code> - The module configuration file exposing the slice name, api name and other store related data.</li> <li><code>&lt;ModuleName&gt;Reducer.tsx</code> - The module main reducer file with basic initial state, data persisting and action handling.</li> <li><code>&lt;ModuleName&gt;Types.ts</code> - The module types with basic example for Actions and State.</li> <li><code>index.ts</code> - The module main file exporting the API module and its types.</li> <li><code>use&lt;ModuleName&gt;.ts</code> - The module main hook file.</li> </ul> <p>Other than creating the folders and files, it will also add the module to the following files:</p> <ul> <li><code>src\\modules\\sdk\\modules\\index.ts</code> - The main SDK file exporting all the modules.</li> <li><code>src\\modules\\sdk\\store.ts</code> - The main SDK store file including and exporting all the reducers and APIs.</li> </ul>"},{"location":"extensions/client/multilingual/","title":"Multi-language support","text":"<p>i18n give you easy way to support with languages and Encapsulate all you titles and static strings in your application to one place and easily to rename or change it.</p> <p>If you are not familiar with <code>i18n</code> and you are not sure what is it please read :  i18n.</p> <p>In Our boilerplate you can easily add and use i18n. We will do it by using <code>react-intl</code> library. If you are not familiar with <code>react-intl</code> please read:  react-intl. To use i18n you need to crate a new Locale ts file, and it map it under <code>messages</code></p> <p>Once you have done with the mapping, the translator utility will be injected to the app, and you will be able to use it by passing the id of your message.</p>"},{"location":"extensions/client/multilingual/#usage-example","title":"Usage Example","text":""},{"location":"extensions/client/multilingual/#add-translation-indexts-file-in-the-example-we-will-use-ents-as-the-main-language","title":"Add translation index.ts file ( in the example we will use en.ts as the main language)","text":"<pre><code>import Devices from './DevicesMessages';\n\nexport default {\n    Devices,\n    AdditionsByFlags,\n    Screens,\n    Header,\n    Common,\n} as const;\n</code></pre>"},{"location":"extensions/client/multilingual/#add-translation-files-in-the-example-devicesmessagests","title":"Add translation files ( in the example DevicesMessages.ts)","text":"<pre><code>export default {\n  deviceGallery: {\n    pageTitle: 'gallery',\n    addToCartButton: 'add to cart',\n    removeFromCartButton: 'remove',\n    priceTitle: 'price',\n    clearCartButton: 'clear',\n    checkoutButton: 'done',\n    deviceCard: {\n        // you can pass a parameter to the message\n        deviceName: 'device name {name}',\n        devicePrice: 'device price',\n        deviceDescription: 'device description'\n    } \n  },\n  checkout: {\n    pageTitle: 'done',\n    totalPriceTitle: 'final price'\n  }\n}\n</code></pre>"},{"location":"extensions/client/multilingual/#if-you-have-more-than-one-language-in-the-example-spts","title":"If you have more than one language ( in the example sp.ts).","text":"<p>Notice, Once you declare it as satisfies MessagesStructure, if any message is missing, it will throw an error. </p> <pre><code>import Devices from './DevicesMessages';\n\nexport default {\n    Devices,\n    AdditionsByFlags,\n    Screens,\n    Header,\n    Common,\n} as const satisfies MessagesStructure;\n</code></pre>"},{"location":"extensions/client/multilingual/#add-to-array-the-language-key-en-sp-in-this-example","title":"Add to array the language key ( 'en', 'sp' in this example)","text":"<pre><code>import enMessages from './en';\nimport spMessages from './sp';\n\n// This will use enMessages as the \"base\" messages.\n// Any other language can be declared as type MessagesStructure, to validate that all messages are present.\n// For example, if you add a new language, in it's index.ts you can declare as:\n// const messages: MessagesStructure = {\n// ...  \nexport type MessagesStructure = MatchStructure&lt;typeof enMessages, typeof enMessages&gt;;\n\nexport type Locales = 'sp' | 'en';\nexport const messages: { [key in Locales]: MessagesStructure } = {\n    sp: spMessages,\n    en: enMessages\n};\n\ntype MatchStructure&lt;T, U&gt; = {\n    [K in keyof T]: K extends keyof U ? MatchStructure&lt;T[K], U[K]&gt; : never;\n};\n</code></pre>"},{"location":"extensions/client/multilingual/#usage-inside-component","title":"usage inside component","text":"<p>The following code show you how to use the messages inside your container.</p> <pre><code>import { useAppIntl } from '@msgs';\n...\nconst Devices: React.FC = () =&gt; {\n    const { formatMessage } = useAppIntl();\n    ...\n    &lt;Container&gt;\n        &lt;Row&gt;\n            &lt;h1 id=\"page-header\"&gt;{formatMessage({ id: 'deviceGallery.pageTitle'})}&lt;/h1&gt;\n        &lt;/Row&gt;\n        &lt;br /&gt;\n        &lt;Form className=\"row\"&gt;\n            &lt;Form.Group&gt;\n                &lt;Form.Control\n                &lt;div&gt;\n                    {/* The json structere is flatten so you can use as below */}\n                    {/* you can pass a parameter to the message if it has one */}\n                    {formatMessage({ id: 'deviceGallery.deviceCard.deviceName'}, { name: 'iPhone 12'})}\n                &lt;/div&gt;\n                ...\n                ...\n</code></pre>"},{"location":"extensions/client/rba/","title":"RBA","text":""},{"location":"extensions/client/rba/#rba-concept","title":"RBA Concept","text":"<p>RBA is built-in feature in harmony that give you the option to store in redux store the <code>permissions</code> list to the store after login.</p>"},{"location":"extensions/client/rba/#rba-actions","title":"RBA Actions","text":"<p>RBA is a base feature that not import automatic to harmony project.</p> <ul> <li><code>RBAStatus</code> - enum of the all the possible status of each permission<ul> <li><code>hidden</code></li> <li><code>disabled</code></li> <li><code>visible</code></li> </ul> </li> <li><code>policies</code> - async call to the RBA api and store it in rba slice in store. basically you call it once user login.</li> <li><code>setPermissions</code> - set the rba permissions. basically you call it when user perform logout to clear or set by any other value.</li> </ul> <p>What is the structure of the permissions object after the mapping process?</p> <pre><code>{\n  \"rba\": {\n    \"permissions\": {\n      \"shipment\": \"hidden\",\n      \"searchInput\": \"disabled\",\n      \"addToCart\": \"disabled\"\n    }\n  }\n}\n</code></pre>"},{"location":"extensions/client/rba/#rbac-component","title":"RBAC Component","text":"<p>To use the RBAC component that will wrap your ui component you need to do the following:</p> <pre><code>import { RBAC } from '@common-components';\n</code></pre> <p>In your render you will need to use it as following:</p> <pre><code>&lt;RBAC id=\"searchInput\"&gt;\n    &lt;Form.Control\n        type=\"text\"\n        data-automation-id=\"filter-input\"\n        placeholder=\"Search\"\n        onChange={(e) =&gt; this.setState({ searchValue: e.target.value.toLowerCase() })}\n    /&gt;\n&lt;/RBAC&gt;\n</code></pre>"},{"location":"extensions/client/storybook/","title":"Storybook","text":"<p>Harmony includes Storybook built-in, providing a powerful tool for developing and testing UI components in isolation. Storybook allows you to create and showcase components independently, making it easier to develop, test, and document your UI.</p>"},{"location":"extensions/client/storybook/#benefits-of-using-storybook-in-harmony","title":"Benefits of Using Storybook in Harmony","text":"<ul> <li>Isolated Development: Develop components in isolation without running your entire application.</li> <li>Interactive Documentation: Create interactive documentation for your components, making it easier for other developers to understand and use them.</li> <li>Visual Testing: Visually test components to ensure they look and behave as expected.</li> <li>Component Libraries: Build and maintain a library of reusable components.</li> <li>Integration with Testing Tools: Integrate with various testing tools to automate visual regression testing.</li> </ul>"},{"location":"extensions/client/storybook/#getting-started-with-storybook","title":"Getting Started with Storybook","text":"<p>To get started with Storybook in Harmony, follow these steps:</p> <ol> <li>Install Storybook: Storybook is included in Harmony, so you don't need to install it separately.</li> <li>Create Stories: Create stories for your components to showcase different states and variations.</li> <li>Run Storybook: Use the command <code>npm run storybook</code> to start the Storybook server and view your components in the browser.</li> </ol>"},{"location":"extensions/client/storybook/#creating-stories","title":"Creating Stories","text":"<p>Each time you create a component, you can also generate a story for it. This allows you to document and test the component in isolation.</p>"},{"location":"extensions/client/storybook/#example-story","title":"Example Story","text":"<pre><code>// MyComponent.stories.ts\nimport React from 'react';\nimport { ComponentStory, Meta } from '@storybook/react';\nimport MyComponent from './MyComponent';\n\nexport default {\n  title: 'Components/MyComponent',\n  component: MyComponent,\n} as Meta;\n\nconst Template: ComponentStory&lt;typeof MyComponent&gt; = (args) =&gt; &lt;MyComponent {...args} /&gt;;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  // Add default args here\n};\n</code></pre>"},{"location":"extensions/client/storybook/#advanced-storybook-features","title":"Advanced Storybook Features","text":"<p>Storybook offers a range of advanced features to enhance your development workflow:</p> <ul> <li>Addons: Extend Storybook's functionality with addons for accessibility, actions, backgrounds, controls, and more.</li> <li>Docs: Automatically generate documentation for your components using the @storybook/addon-docs addon.</li> <li>Controls: Create interactive controls for your component props to dynamically change their values in the Storybook UI.</li> <li>Actions: Log actions and events triggered by your components to debug and test their behavior.  For more information, check out the official Storybook documentation.</li> </ul>"},{"location":"extensions/client/storybook/#conclusion","title":"Conclusion","text":"<p>Storybook is a powerful tool that enhances the development and testing of UI components in Harmony. By leveraging Storybook's features, you can create robust, well-documented, and visually tested components that improve the overall quality of your application.</p> <p>For more detailed information and advanced usage, refer to the Storybook documentation.</p>"}]}